{
	"info": {
		"_postman_id": "6966c24e-fd99-47ea-bcfd-cfecb6d76227",
		"name": "ReqRes API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37402322"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register User (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User registered successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody(\"id\");\r",
									"    pm.response.to.have.jsonBody(\"token\");\r",
									"\r",
									"    // Save the token to the environment\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"userToken\", jsonData.token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User (Negative)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 400\", function() {\r",
									"      pm.response.to.have.status(400);\r",
									"    }),\r",
									"pm.test(\"response has error\", function() {\r",
									"      pm.expect(pm.response.json()).to.have.property('error');\r",
									"    })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User logged in successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody(\"token\");\r",
									"\r",
									"    // Save the token to the environment\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"userToken\", jsonData.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User (Negative)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"krneki@example.com\",\r\n  \"password\": \"brezvezepassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delayed Response",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request script to delay the request\r",
									"setTimeout(() => {\r",
									"    console.log('Request is being sent after a delay of 3 seconds.');\r",
									"}, 3000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script to simulate a delayed response\r",
									"setTimeout(() => {\r",
									"    console.log('Response received after a delay of 3 seconds.');\r",
									"    // Add your test assertions here\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}, 3000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?delay=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User logged out successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "User update (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.jsonBody(\"name\", \"morpheus\");\r",
									"    pm.response.to.have.jsonBody(\"job\", \"zion resident\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "User create (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User updated successfully\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.jsonBody(\"createdAt\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Users (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data array is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User (Positive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data has id, email, first_name, and last_name properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User (Negative)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/23",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"23"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}